%shadername :: Obq_Fresnel

%class :: Texture

%output :: Color RGB

%synopsisStart

%pp :: Obq_Fresnel is a texture node that outputs colored proportion of light reflected/refracted from a surface based on the refractive indices and the extinction coefficients. Note that this shader is particularly useful for getting the right metal reflection color by driving the <em>ks_color</em> port of a standard shader. A lot of presets are available, but you can also import wavelength dependent complex IORs. Creation of an energy conserving 2-layers material can also be done by using the <a href="Obq_Fresnel2Standards.html">Obq_Fresnel2Standards compound</a>.
%warning :: You should not use the Obq_Fresnel for dielectrics (material with refraction), the <em>Use IOR for Fresnel</em> parameter of the standard shader should be used instead. However, you can use the <em>Material Type : Refractive</em> for coatings.
%image :: src/images/Obq_Fresnel_01.jpg :: Synopsis image :: 768
%idesc :: In this example, the Stanford dragon is shaded using an Obq_Fresnel with an iron preset plugged into the <em>specular color</em> port of the standard shader. Note that the Fresnel parameters of the standard must not be enabled.


%synopsisEnd

%usageStart

%pp :: The simplest way is to use Obq_Fresnel is to plug the output in the <em>specular color</em> port of the standard shader like shown above. Using the Obq_Fresnel2standards compounds, you can also achieve multi-layered materials and respect energy conservation.
%image :: src/images/Obq_Fresnel_02.jpg :: Usage image :: 768
%idesc :: Statues of Ajax from left to right : smooth gold, rough copper, rough osmium with silver flakes underneath a smooth acrylic layer, smooth ice and a vegetable oil covered rosewood. The gold and copper Ajax have been created with their respective preset and simply connected to the <em>specular color</em> port of the standard shader. The third and fifth Ajax are using the compounds shown below the render.

#%usageEnd

%section :: Settings

%param :: Fresnel Mode <em>[mode]</em>
%pp :: Different value input mode.
%tableStart
%tableItem :: 50 :: Custom :: enter arbitrary values.
%tableItem :: 50 :: Preset :: choose predefined materials.
%tableItem :: 50 :: File :: load a file containing wavelengths and their respective refractive indices and extinction coefficients, respectively n [eta] and k. You can load comma-separated values (.csv), tab-separated values (.txt) and pbrt's .spd.
%tableEnd
%note :: You can get files from websites like : <a href="http://refractiveindex.info" target="blank">http://refractiveindex.info</a> and <a href="http://www.filmetrics.com/refractive-index-database" target="blank">http://www.filmetrics.com/refractive-index-database</a>. Change verbosity level to "warning+info", open the script editor and render to see the RGB values for n and k. You can also add this value as a preset by modifying the spdl.

%param :: Presets <em>[presets]</em>
%pp :: Material presets with their values.

%section :: LookUp Table

%param :: Enable precalculated LUT <em>[useLUT]</em>
%pp :: Precalculate the fresnel term for every <em>sample size &deg;</em> during the proprocessing phase.
%note :: This translate into an acceleration of approximately 7%.

%param :: Sample size (&deg;) <em>[LUTSampleSize]</em>
%pp :: The distance in degrees between 2 samples in the LUT. This will produce a LUT with 90/LUTSampleSize + 1 entries.

%section :: File

%param :: Filename <em>[iorFilename]</em>
%pp :: You can browse for a ior files. While .csv and .txt contains both n and k or only n, spds only contains one of them at a time. Gold, for example, would have a file "Au.eta.spd" for n and a "Au.k.spd" for k. Loading one of them will automatically load the other if it exists.

%param :: Wavelenghts Units <em>[lambdaUnits]</em>
%pp :: Depending on the origin of the file, wavelenghts units will usually be :
%tableStart
%tableItem :: 80 :: nanometers :: [ 360nm-830nm ].
%tableItem :: 80 :: micrometers :: [ 0.360um-0.830um ].
%tableEnd
%pp :: You have to select the appropriate one.
%note :: A warning might be issued if the shader thinks you selected the wrong units.

%param :: Use full spectrum data in equations (metal) <em>[useFullSpectrum]</em>
%pp :: Normally, the complex IOR spectral data is transformed into 2 CIE XYZ coordinates and then converted into 2 RGB values representing a complex index of refraction, not a color. These RGB values (eta and k) are then used in the complex fresnel equations. When you enable this option, the fresnel term for every spectral entries is calculated and the result is transformed into a CIE XYZ coordinate and then converted into a RGB value representing a color. This should give very slightly better results.
%note :: This option is only available in file mode for metals.
%warning :: This is longer to process and should always be used with a LUT.

%section :: Refractive Indices
%param :: n (eta) <em>[iorRGB]</em>
%pp :: RGB n [eta] are the real parts of the refractive indices. There is no single specific wavelenght for red, green or blue. It's rather a sum of weighted values. The best way to choose values for them is to actually load the file corresponding to that material, select "warning+info" verbose level in the diagnostic tab of the Arnold render options and look at the log for the actual RGB values.

%section :: Extinction Coefficients
%param :: k <em>[kRGB]</em>
%pp :: RGB k (extinction coefficients) are the complex part of the refractive indices. Metals absorb and reflect light, that's what gives the color. They are approximately equal to 0 for non metals. Values can be found the same way as for n.

%section :: Equations
%param :: Materiel Type <em>[method]</em>
%pp :: The fresnel implementation used for evaluation :
%tableStart
%tableItem :: 70 :: Refractive :: uses equations for dielectrics. Choose this mode if the material reflects and/or refract lights. If you want to simulate a varnished piece of wood, for example, choose this mode and use values of the varnish. Instead of driving the refraction scale or color with the transmitted value, drive the diffuse scale of the shader or premultiply the texture color with it. These equations ignore k.
%tableItem :: 70 :: Metals :: uses equations for metals. Choose this mode if you want to drive the reflection or specular color of a material.
%tableEnd

%section :: Options
%param :: Ratio of polarized Fs/Fp <em>[ratioFsFp]</em>
%pp :: Ratio of s- and p-polarisations.

%param :: Backface <em>[backfaceMode]</em>
%pp :: This allows you to control what happens when a backface of a polygon is intersected by a ray. This is only used when "Refractive" type is chosen and you want to use on a dielectric even though you're not supposed to ;)
%tableStart
%tableItem :: 110 :: Same as Frontface :: This treats backfaced polygon as frontface.
%tableItem :: 110 :: Swap IORs :: Use this when the refracting material is a closed volume. It swaps the ior and the media in ior. Because it is important to know in which media you are in when calculating these values, being in water and going into glass will not give the same values as being in glass and going into water.
%tableItem :: 110 :: Always White :: Returns white.
%tableItem :: 110 :: Always Black :: Returns black.
%tableEnd

%section :: Output
%param :: Output Refraction Color <em>[transmittance]</em>
%pp :: By default, this shader returns the reflected portion of light. If this is check, it will return the refracted portion of light. It's essentially equals to 1-R except for metals (0).

%param :: DeGamma metals for linear workflow <em>[degamma]</em>
%pp :: This options should be checked for metals when using a linear gamma, otherwise, colors might seem washed out.

%section :: Standard IOR <em>(DEPRICATED)</em>
%param :: Expression for standard IOR <em>-</em>
%pp :: You should set this expression on <em>IOR</em> parameter of the standard if you do dielectrics, but don't.

%section :: Media In
%param :: Refractive Indices - n <em>[iorInRGB]</em>
%pp :: Same as previous n, but this is the media in which your object lies. Generally equals to 1, but if you're in water, for example, it would be 1.33. Ideally, this would exist and would be equal the the ray current IOR.

